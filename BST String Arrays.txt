#include "stdafx.h"
#include <iostream>
#include <string>
#define size 100
using namespace std;

void createBST(string arr[], string data, int index) {  // the function that creates the array with string values
	if (index >= size) {
		cout << "No Space Available " << endl;
	}
	else if (arr[index] == " ") { // if it is an empty spot add the name
		arr[index] = data;
	}
	else if (data < arr[index]) {
		createBST(arr, data, index * 2);
	}
	else {
		createBST(arr, data, (index * 2) + 1);
	}
}


void PreOrder(string arr[], int index) {  // prints in PreOrder
	if (arr[index] != " ") {
		cout << arr[index] << " ";
		PreOrder(arr, index * 2);
		PreOrder(arr, (index * 2) + 1);
	}
}

void InOrder(string arr[], int index) {// prints in InOrder
	if (arr[index] != " ") {
		InOrder(arr, index * 2);
		cout << arr[index] << " ";
		InOrder(arr, (index * 2) + 1);
	}
}
void PostOrder(string arr[], int index) {// prints in PostOrder
	if (arr[index] != " ") {
		PostOrder(arr, index * 2);
		PostOrder(arr, (index * 2) + 1);
		cout << arr[index] << " ";
	}
}
//gets the max value of a and b getting height
int max(int a, int b) {
	if (a < b) {
		return a;
	}
	else {
		return b;
	}
}
int height(string arr[], int index) {

	//base case if tree is empty
	if (arr[index] == " ") {
		return 0;
	}

	//if tree isnt empty then return 1 + height of roots-left and right nodes.
	return 1 + max(height(arr, index * 2), height(arr, (index * 2) + 1));
}


//get the leftchild
int LeftChild(int index)
{
	index = (index * 2);
	return index;
}

//get right child
int RightChild(int index)
{
	index = (index * 2) + 1;
	return index;
}

bool isBalanced(string arr[], int index)
{
	int leftTree; /* for height of left subtree */
	int rightTree; /* for height of right subtree */

	int LC = LeftChild(index);
	int RC = RightChild(index);

	/* If tree is empty then return true */
	if (arr[index] == " ") {
		return true;
	}
	//set left = to hieght of left side
	leftTree = height(arr, LC);
	//set right = to height of right side
	rightTree = height(arr, RC);
	//if left height - right hieght is less than = 1 and is balanced on left and right of root
	if (abs(leftTree - rightTree) <= 1 && isBalanced(arr, LC) && isBalanced(arr, RC))
	{
		cout << "balanced" << endl;
		return true;
	}
	else {

		//if its not balenced
		cout << "not balanced" << endl;
		return false;
	}
}


int main()
{
	string arr[size];
	string data;
	char ch = 'y';
	for (int i = 0; i < size; i++) {
		arr[i] = " ";
	}
	while (ch == 'y' || ch == 'Y') { // while the value true insert names into array
		cout << "Please enter a value: " << endl;
		cin >> data;
		createBST(arr, data, 1);
		cout << "Would you like to continue? " << endl;
		cin >> ch;
	}
	cout << " " << endl;
	cout << " Preorder: " << endl;
	PreOrder(arr, 1);
	cout << " " << endl;
	cout << "InOrder: " << endl;
	InOrder(arr, 1);
	cout << " " << endl;
	cout << "PostOrder: " << endl;
	PostOrder(arr, 1);
	cout << " " << endl;
	isBalanced(arr, 1);
	return 0;
}




