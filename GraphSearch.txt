
//
//  main.cpp
//  Week14GraphSamualShaqqur
//
//  Created by Samuel Shaqqur on 11/20/16.
//  Copyright Â© 2016 Samuel Shaqqur. All rights reserved.
//

#include <iostream>
#include <stdio.h>
#include <limits.h>
using namespace std;
// Number of vertices in the graph

#define V 7


int minDistance(int dist[], bool sptSet[])

{

    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++)

        if (sptSet[v] == false && dist[v] <= min){
            min = dist[v], min_index = v;
        }
    return min_index;

}

void printPath(int parent[], int j)

{

    // Base Case : If j is source

    if (parent[j]==-1)
    {
        return;
    }
    printPath(parent, parent[j]);
    printf("%d ", j);

}


void printSolution(int dist[], int n, int parent[])

{

    int src = 2;

    printf("Vertex\t Distance\tPath");

    for (int i =3 ; i < V; i++)

    {

        printf("\n%d -> %d \t\t %d\t\t%d ", src,i,dist[i],src);

        printPath(parent,i);

    }

}

void Graph(int graph[V][V], int src)

{

    int dist[V];

    bool sptSet[V];


    int parent[V];

    for (int i = 0; i < V; i++)

    {

        parent[2] = -1;

        dist[i] = INT_MAX;

        sptSet[i] = false;

    }


    dist[src] = 0;


    for (int count = 0; count < V-1; count++)

    {


        int u = minDistance(dist, sptSet);

        sptSet[u] = true;


        for (int v = 0; v < V; v++)


            if (!sptSet[v] && graph[u][v] &&

                dist[u] + graph[u][v] < dist[v])

            {

                parent[v] = u;

                dist[v] = dist[u] + graph[u][v];

            }

    }

    printSolution(dist, V, parent);

}

int main()

{

    int graph[V][V] = {{0, 0, 0, 0, 0, 800, 600},

        {0, 0, 0, 200, 0, 160, 0},
        
        {0, 0, 0, 0, 1000, 0, 0},
        
        {0, 200, 900, 0, 780, 0, 0},
        
        {1400, 0, 1000, 0, 0, 0, 0},
        
        {800, 0, 0, 0, 0, 0, 0},
        
        {600, 0, 0, 1300, 0, 0, 0},
        
    };
    
    Graph(graph, 2);
    
    return 0;
    
}