#include "stdafx.h"
#include <iostream>
#define MAX_SIZE 31
using namespace std;

template <class T>
class HeapBT {
private:
	T heapArr[MAX_SIZE];
	int root, count;
public:
	//constructor function
	HeapBT() {
		for (int x = 1; x < MAX_SIZE; x++) {
			heapArr[x] = 0;
		}
		count = 0;
	}
	//insert elements to the heap Binary tree
	void AddElement(T value) {
		// filling the tree with data values
		if (count >= MAX_SIZE) {
			cout << "ARRAY OVERFLOW!\n";
			return;
		}
		else {
			count++;
			//set that orginal value of heaparr index off at 0 to value
			heapArr[count - 1] = value;
			//then make sure that value isnt bigger than the just indexed
			shiftUp(count - 1);
		}
	}
	//swapping values
	void SwapElements(T& A, T& B) {
		T Temp = A;
		A = B;
		B = Temp;
	}
	//sift up used for adding an element and chceking
	void shiftUp(int index)
	{
		//make a parent var and set it to functoin pass parm throug
		int indexParent = getParentIndex(index);
		cout << "index: " << index << endl;
		cout << "parent: " << indexParent << endl;
		//if index isnt 0 and heap arr indexed parent is less than current
		if (index != 0 && heapArr[indexParent] < heapArr[index]) {
			//then make a temp int var and get the valu of the index of parent
			T temp = heapArr[indexParent];
			//then set the index of the parent equal to the index because its bigger
			heapArr[indexParent] = heapArr[index];
			//assign the indexparent value from temp to heaparray index
			heapArr[index] = temp;
		}
	}
	//to delete a value
	void shiftDown(int index)
	{
		//using values of leftchild with index from function
		int indexLeftChild = getLeftChildIndex(index);
		//using values of rightchild with index from function
		int indexRightChild = getRightChildIndex(index);
		//showing whats happening when deleting a value
		cout << "index" << index << endl;
		cout << "left: " << indexLeftChild << endl;
		cout << "right: " << indexRightChild << endl;
		int MaxValueIndex;
		if (indexRightChild >= count)
		{
			if (indexLeftChild >= count) {
				return;
			}
			indexLeftChild = indexRightChild;
		}
		else {
			//if value from right child is bigger than left child
			if (heapArr[indexRightChild] >= heapArr[indexLeftChild]) {
				//get the index of right child give to temp var hold max index value
				MaxValueIndex = indexRightChild;
			}
			else {
				MaxValueIndex = indexLeftChild;
			}
		}
		//after both cases we got a max value and its greater than current index
		if (heapArr[index] < heapArr[MaxValueIndex]) {
			SwapElements(heapArr[MaxValueIndex], heapArr[index]);
			shiftDown(MaxValueIndex);
		}
	}
	//delete an delement parm passes value
	void Delete(T xElement)
	{
		int foundIndex = 0;
		if (isEmpty())
		{
			cout << "cant delete elment from heap!" << endl;
			return;
		}
		for (int x = 0; x < MAX_SIZE; x++) {
			if (heapArr[x] == xElement) {
				cout << "found: " << xElement;
				foundIndex = x;
			}
		}
		//otherwise not found return break out of function
		if (heapArr[foundIndex] != xElement) {
			cout << "Could not find: " << xElement;
			return;
		}
		//if found print value found
		cout << "Element Deleted: " << heapArr[foundIndex] << endl;
		heapArr[foundIndex] = 0;
		//heave element found now set to the leaf node
		heapArr[foundIndex] = heapArr[count - 1];
		//then set leave not equal to 0
		heapArr[count - 1] = 0;
		//making sure everythin is in order
		shiftDown(count - 1);
		count--;
	}
	T returnCount() {
		if (count == 0) {
			cout << "There are no elements in the tree!\n";
		}
		return count;
	}
	//get max value in tree
	T getMax() {
		root = heapArr[0];
		if (isEmpty()) {
			cout << "No elements in the Heap\n";
			return 0;
		}
		else {
			return root;
		}
	}
	//remove the root which we have max at root
	void removeMax() {
		//after we do a heapsort we can know that root has max val
		cout << "Max Value of: " << heapArr[0] << " is removed\n";
		SwapElements(heapArr[0], heapArr[count - 1]);
		count--;
		shiftDown(0);
		heapArr[count] = 0;
	}
	//used to sort the tree
	void HeapSort(T index) {
		if (isEmpty()) {
			cout << "Cant sort anything\n";
			return;
		}
		//sort all the elements from count to isst index
		else {
			for (int x = count; x > 0; x--) {
				shiftUp(x);
			}
		}
	}
	//return parent function
	int getParentIndex(int i) {
		if (i == 0) {
			return 0;
		}
		else {
			i = ((i - 1) / 2);
		}
		return i;
	}
	//right child function
	int getRightChildIndex(int i) {
		i = (i + 2) + 1;
		return i;
	}
	// left parent function
	int getLeftChildIndex(int i) {
		i = (i + 2) + 2;
		return i;
	}
	bool isEmpty() {
		if (count == 0) {
			cout << "UNDERFLOW!!\n";
			return true;
		}
		return false;
	}
	//print elements in the heap
	void print() {
		cout << "Heap[0-" << count << "]:\n";
		for (int x = 0; x < count; x++) {
			cout << heapArr[x] << "\n";
		}
	}
	T menu() {
		int choice;
		cout << "\nMenu\n\n";
		cout << "1. Add an item.\n";
		cout << "2. Remove an item.\n";
		cout << "3. Print Tree.\n";
		cout << "4. Remove max value\n";
		cout << "5. Max element\n";
		cout << "6. Number of Elements.\n";
		cout << "7. Sort array.\n";
		cout << "8. Exit.\n";
		cin >> choice;
		return choice;
	}
	
	void Implemenation() {
		int testArray[] = { 1,3,27,22,18,4,11,26,42,19,6,2,15,16,13 };
		int length = sizeof(testArray) / 4;
		for (int x = 0; x<length; x++) {
			//to add the elements in the test array
			AddElement(testArray[x]);
		}
		//choice prompt, number, delete number, order for transversal
		int enter, deleteNum, choice;
		do {
			//assigning the variable choice to our menu function
			choice = menu();
			switch (choice) {
				//first option which you can
			case 1: cout << "Please enter a number in: \n";
				cin >> enter;
				AddElement(enter);
				break;
			case 2:
				cout << "please integer in a number you like to delete:\n";
					cin >> deleteNum;
				//prompt the user to delete number
				Delete(deleteNum);
				cout << "Deleted: " << deleteNum;
				break;
				//showing all the elements if added
			case 3:
				print();
				break;
			case 4:
				removeMax();
				break;
			case 5:
				cout << "Max Value: " << getMax();
				break;
			case 6:
				cout << returnCount() << " in the Tree";
				break;
			case 7:
				//heap sorted
				HeapSort(count - 1);
				print();
				break;
			default: cout << "System Exit!\n";
				break;
			}
		} while (choice != 8);
	}
};
int main()
{
	HeapBT<int>MyTree; // instance or my tree class
	MyTree.Implemenation(); //for int data type heap
	cout << "\nJust Exited menu from integer Heap!\n";
	HeapBT<char> MyTree2; //instance of my tree class object two
	MyTree2.Implemenation(); //type float
	cout << "\nJust Exited menu from character Heap!\n";
	HeapBT<double> MyTree3; //instance of my tree class object three
	MyTree3.Implemenation(); //type double
	cout << "\nJust Exited menu from double type Heap!\n";
	return 0;
}














	
